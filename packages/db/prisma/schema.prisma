generator client {
  provider   = "prisma-client-js"
  output     = "../src/.prisma/generated"
  engineType = "library"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(uuid())
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime   @db.Timestamptz(3)
  updatedAt     DateTime   @db.Timestamptz(3)
  sessions      Session[]
  accounts      Account[]
  Room          Room[]
  Playlist      Playlist[]
  Track         Track[]

  @@unique([email])
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime @db.Timestamptz(3)
  token     String
  createdAt DateTime @db.Timestamptz(3)
  updatedAt DateTime @db.Timestamptz(3)
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime? @db.Timestamptz(3)
  refreshTokenExpiresAt DateTime? @db.Timestamptz(3)
  scope                 String?
  password              String?
  createdAt             DateTime  @db.Timestamptz(3)
  updatedAt             DateTime  @db.Timestamptz(3)
}

model Verification {
  id         String    @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime  @db.Timestamptz(3)
  createdAt  DateTime? @db.Timestamptz(3)
  updatedAt  DateTime? @db.Timestamptz(3)
}

model Jwks {
  id         String   @id @default(uuid())
  publicKey  String
  privateKey String
  createdAt  DateTime @db.Timestamptz(3)

  @@map("jwks")
}

// Application Models

model Album {
  id        String   @id @default(uuid())
  title     String
  artists   Artist[]
  tracks    Track[]
  metadata  Json
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
}

model Track {
  id           String     @id @default(uuid())
  title        String
  artists      Artist[]
  albumId      String
  album        Album      @relation(fields: [albumId], references: [id], onDelete: Cascade)
  duration     Int // duration in seconds
  metadata     Json
  createdAt    DateTime   @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime   @updatedAt @db.Timestamptz(3)
  playlists    Playlist[]
  uploadedBy   User       @relation(fields: [uploadedById], references: [id])
  uploadedById String
  public       Boolean    @default(false)
}

model Artist {
  id        String   @id @default(uuid())
  name      String
  albums    Album[]
  tracks    Track[]
  metadata  Json
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
}

model Room {
  id         String       @id @default(uuid())
  name       String
  ownerId    String
  owner      User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  metadata   Json
  createdAt  DateTime     @default(now()) @db.Timestamptz(3)
  updatedAt  DateTime     @updatedAt @db.Timestamptz(3)
  playlist   Playlist?    @relation(fields: [playlistId], references: [id])
  playlistId String?
  plugins    RoomPlugin[]

  @@unique([name, ownerId])
}

model RoomPlugin {
  id        String   @id @default(uuid())
  roomId    String
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  pluginId  String // Plugin identifier (e.g., "pomodoro")
  settings  Json
  lastState Json?
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  @@unique([roomId, pluginId])
}

model Playlist {
  id          String       @id @default(uuid())
  name        String
  description String?
  slug        String       @unique
  ownerId     String
  owner       User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  tracks      Track[]
  metadata    Json
  type        PlaylistType @default(user)
  createdAt   DateTime     @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime     @updatedAt @db.Timestamptz(3)
  rooms       Room[]
}

enum PlaylistType {
  my_uploaded
  my_favorite
  my_liked
  user
  room
}
